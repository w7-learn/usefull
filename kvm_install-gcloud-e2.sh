#!/bin/bash

# ================================================
# Teljes k√∂r≈± KVM virtualiz√°ci√≥s platform telep√≠t≈ë
# Google Cloud VM-re optimaliz√°lva (Rocky Linux 8.x)
# Funkci√≥k: KVM + Cockpit WebUI + VM management tools
# Szerz≈ë: AI Assistant
# Verzi√≥: 2.0
# ================================================

set -e  # Kil√©p√©s hiba eset√©n

# Sz√≠nes kimenet
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Logol√°s f√ºggv√©nyek
log_header() { echo -e "${WHITE}${1}${NC}"; }
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_step() { echo -e "${BLUE}[STEP]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }

# Root jogok ellen≈ërz√©se
if [[ $EUID -ne 0 ]]; then
   log_error "Ez a script root jogokkal kell futtatni!"
   echo "Haszn√°lat: sudo bash $0"
   exit 1
fi

# Banner
clear
log_header "================================================"
log_header "üöÄ TELJES K√ñR≈∞ KVM VIRTUALIZ√ÅCI√ìS PLATFORM"
log_header "================================================"
log_header "üéØ Optimaliz√°lva Google Cloud nested virtualiz√°ci√≥hoz"
log_header "üì¶ Tartalmazza: KVM + Cockpit WebUI + Management Tools"
log_header "================================================"
echo ""

# Rendszer inform√°ci√≥k
log_step "Rendszer inform√°ci√≥k √∂sszegy≈±jt√©se..."
HOSTNAME=$(hostname)
SERVER_IP=$(hostname -I | awk '{print $1}')
TOTAL_RAM=$(free -m | awk '/^Mem:/{print $2}')
TOTAL_CPU=$(nproc)
OS_VERSION=$(cat /etc/os-release | grep "PRETTY_NAME" | cut -d'"' -f2)

echo ""
log_info "üñ•Ô∏è  Szerver: $HOSTNAME"
log_info "üåç IP c√≠m: $SERVER_IP"
log_info "üíæ RAM: ${TOTAL_RAM}MB (~$((TOTAL_RAM/1024))GB)"
log_info "‚ö° CPU magok: $TOTAL_CPU"
log_info "üêß OS: $OS_VERSION"
echo ""

# Meger≈ës√≠t√©s
read -p "$(echo -e ${CYAN}"Folytatod a telep√≠t√©st? (y/N): "${NC})" confirm
if [[ ! $confirm =~ ^[Yy]$ ]]; then
    log_warn "Telep√≠t√©s megszak√≠tva."
    exit 0
fi

# ================================================
# 1. RENDSZER FRISS√çT√âSE
# ================================================
log_header "üì¶ 1. RENDSZER FRISS√çT√âSE"
log_step "DNF package manager friss√≠t√©se..."
dnf update -y

log_step "EPEL repository hozz√°ad√°sa..."
dnf install -y epel-release

# ================================================
# 2. CPU VIRTUALIZ√ÅCI√ì ELLEN≈êRZ√âSE
# ================================================
log_header "‚ö° 2. CPU VIRTUALIZ√ÅCI√ì ELLEN≈êRZ√âSE"

log_step "CPU virtualization t√°mogat√°s ellen≈ërz√©se..."
CPU_VIRT=$(egrep -c '(vmx|svm)' /proc/cpuinfo || true)
if [ "$CPU_VIRT" -eq 0 ]; then
    log_error "‚ùå CPU nem t√°mogatja a virtualiz√°ci√≥t!"
    log_error "Google Cloud VM-en enged√©lyezd a nested virtualiz√°ci√≥t:"
    log_error "gcloud compute instances stop $HOSTNAME"
    log_error "gcloud compute instances update $HOSTNAME --enable-nested-virtualization"
    log_error "gcloud compute instances start $HOSTNAME"
    exit 1
else
    log_success "‚úÖ CPU virtualization t√°mogatott ($CPU_VIRT mag)"
fi

# CPU t√≠pus meghat√°roz√°sa
if grep -q "Intel" /proc/cpuinfo; then
    CPU_TYPE="intel"
    log_info "üîß Intel CPU detected"
elif grep -q "AMD" /proc/cpuinfo; then
    CPU_TYPE="amd"
    log_info "üîß AMD CPU detected"
else
    log_warn "‚ö†Ô∏è  Ismeretlen CPU t√≠pus"
    CPU_TYPE="unknown"
fi

# ================================================
# 3. KVM √âS VIRTUALIZ√ÅCI√ìS CSOMAGOK TELEP√çT√âSE
# ================================================
log_header "üì¶ 3. KVM VIRTUALIZ√ÅCI√ìS PLATFORM TELEP√çT√âSE"

log_step "Virtualization Host csomagcsoport telep√≠t√©se..."
dnf groupinstall -y "Virtualization Host"

log_step "Tov√°bbi KVM √©s management eszk√∂z√∂k telep√≠t√©se..."
dnf install -y \
    qemu-kvm \
    libvirt \
    libvirt-daemon-config-network \
    libvirt-daemon-kvm \
    virt-install \
    virt-top \
    virt-viewer \
    virt-manager \
    libguestfs-tools \
    bridge-utils \
    dnsmasq \
    ebtables

# ================================================
# 4. COCKPIT WEBUI TELEP√çT√âSE
# ================================================
log_header "üåê 4. COCKPIT WEB MANAGEMENT TELEP√çT√âSE"

log_step "Cockpit √©s modulok telep√≠t√©se..."
dnf install -y \
    cockpit \
    cockpit-machines \
    cockpit-storaged \
    cockpit-networkmanager \
    cockpit-packagekit \
    cockpit-selinux \
    cockpit-sosreport

# ================================================
# 5. NESTED VIRTUALIZ√ÅCI√ì OPTIMALIZ√ÅCI√ì
# ================================================
log_header "üîß 5. NESTED VIRTUALIZ√ÅCI√ì OPTIMALIZ√ÅCI√ì"

log_step "GRUB kernel param√©terek optimaliz√°l√°sa..."
# Backup eredeti GRUB config
cp /etc/default/grub /etc/default/grub.backup

# GRUB param√©terek hozz√°ad√°sa
if ! grep -q "intel_iommu=on" /etc/default/grub; then
    sed -i 's/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="intel_iommu=on iommu=pt kvm.ignore_msrs=1 kvm.report_ignored_msrs=0 /' /etc/default/grub
    grub2-mkconfig -o /boot/grub2/grub.cfg
    log_info "‚úÖ GRUB kernel param√©terek friss√≠tve"
fi

log_step "KVM modulok optimaliz√°l√°sa nested virtualiz√°ci√≥hoz..."
# KVM modul konfigur√°ci√≥
cat > /etc/modprobe.d/kvm-nested.conf << EOF
# KVM nested virtualization optimaliz√°ci√≥ Google Cloud-hoz
options kvm ignore_msrs=1 report_ignored_msrs=0
EOF

if [ "$CPU_TYPE" = "intel" ]; then
    echo 'options kvm_intel nested=1 enable_shadow_vmcs=1 enable_apicv=1 ept=1' >> /etc/modprobe.d/kvm-nested.conf
elif [ "$CPU_TYPE" = "amd" ]; then
    echo 'options kvm_amd nested=1' >> /etc/modprobe.d/kvm-nested.conf
fi

# CPU governor be√°ll√≠t√°sa teljes√≠tm√©nyre
log_step "CPU governor be√°ll√≠t√°sa performance m√≥dra..."
echo 'performance' | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor > /dev/null 2>&1 || true

# ================================================
# 6. H√ÅL√ìZATI KONFIGUR√ÅCI√ì
# ================================================
log_header "üåê 6. H√ÅL√ìZATI KONFIGUR√ÅCI√ì"

log_step "Default bridge h√°l√≥zat konfigur√°l√°sa..."
# Libvirt default network ind√≠t√°sa
systemctl enable --now libvirtd
virsh net-autostart default
virsh net-start default 2>/dev/null || true

log_step "Bridge h√°l√≥zat l√©trehoz√°sa VM-ekhez..."
# Custom bridge l√©trehoz√°sa (opcion√°lis)
cat > /tmp/vm-bridge.xml << 'EOF'
<network>
  <name>vm-bridge</name>
  <forward mode='nat'>
    <nat>
      <port start='1024' end='65535'/>
    </nat>
  </forward>
  <bridge name='vm-br0' stp='on' delay='0'/>
  <ip address='192.168.100.1' netmask='255.255.255.0'>
    <dhcp>
      <range start='192.168.100.100' end='192.168.100.200'/>
    </dhcp>
  </ip>
</network>
EOF

virsh net-define /tmp/vm-bridge.xml
virsh net-autostart vm-bridge
virsh net-start vm-bridge 2>/dev/null || true

# ================================================
# 7. SZOLG√ÅLTAT√ÅSOK KONFIGUR√ÅL√ÅSA
# ================================================
log_header "üîß 7. SZOLG√ÅLTAT√ÅSOK KONFIGUR√ÅL√ÅSA"

log_step "Libvirt szolg√°ltat√°sok ind√≠t√°sa..."
systemctl enable --now libvirtd
systemctl enable --now virtlogd
systemctl enable --now virtlockd

log_step "Cockpit szolg√°ltat√°s ind√≠t√°sa..."
systemctl enable --now cockpit.socket

# ================================================
# 8. FELHASZN√ÅL√ìI JOGOK BE√ÅLL√çT√ÅSA
# ================================================
log_header "üë§ 8. FELHASZN√ÅL√ìI JOGOK BE√ÅLL√çT√ÅSA"

# Aktu√°lis nem-root felhaszn√°l√≥ meghat√°roz√°sa
CURRENT_USER=$(logname 2>/dev/null || echo $SUDO_USER || echo "saborobag")

log_step "Felhaszn√°l√≥ ($CURRENT_USER) hozz√°ad√°sa virtualiz√°ci√≥s csoportokhoz..."
usermod -aG libvirt $CURRENT_USER
usermod -aG kvm $CURRENT_USER
usermod -aG qemu $CURRENT_USER

# ================================================
# 9. FIREWALL KONFIGUR√ÅCI√ì
# ================================================
log_header "üî• 9. FIREWALL KONFIGUR√ÅCI√ì"

log_step "Firewall szab√°lyok be√°ll√≠t√°sa..."
# Cockpit web interface
firewall-cmd --permanent --add-service=cockpit
# Libvirt szolg√°ltat√°sok
firewall-cmd --permanent --add-service=libvirt
# VNC portok VM-ekhez
firewall-cmd --permanent --add-port=5900-5950/tcp
# SSH (ha nincs enged√©lyezve)
firewall-cmd --permanent --add-service=ssh

# Custom portok specifikus VM-ekhez
firewall-cmd --permanent --add-port=8080-8090/tcp  # Web alkalmaz√°sok
firewall-cmd --permanent --add-port=3389/tcp       # RDP
firewall-cmd --permanent --add-port=22-2222/tcp    # SSH range

firewall-cmd --reload
log_success "‚úÖ Firewall konfigur√°ci√≥ k√©sz"

# ================================================
# 10. VM MANAGEMENT SCRIPTEK L√âTREHOZ√ÅSA
# ================================================
log_header "üìú 10. VM MANAGEMENT SCRIPTEK"

log_step "VM management scriptek l√©trehoz√°sa..."

# VM l√©trehoz√≥ script
cat > /usr/local/bin/create-vm << 'EOF'
#!/bin/bash
# VM l√©trehoz√≥ script
# Haszn√°lat: create-vm <n√©v> <ram_gb> <cpu> <disk_gb> <iso_path>

VM_NAME="${1:-test-vm}"
RAM_GB="${2:-4}"
CPU_COUNT="${3:-2}"
DISK_SIZE="${4:-20}"
ISO_PATH="${5}"

if [ -z "$ISO_PATH" ]; then
    echo "Haszn√°lat: create-vm <n√©v> <ram_gb> <cpu> <disk_gb> <iso_path>"
    echo "P√©lda: create-vm ubuntu-server 4 2 20 /tmp/ubuntu.iso"
    exit 1
fi

RAM_MB=$((RAM_GB * 1024))

echo "üöÄ VM l√©trehoz√°sa:"
echo "  N√©v: $VM_NAME"
echo "  RAM: ${RAM_GB}GB"
echo "  CPU: $CPU_COUNT vCPU"
echo "  Disk: ${DISK_SIZE}GB"
echo "  ISO: $ISO_PATH"

virt-install \
    --name="$VM_NAME" \
    --memory="$RAM_MB" \
    --vcpus="$CPU_COUNT" \
    --cpu host-passthrough \
    --disk size="$DISK_SIZE",format=qcow2,cache=writeback \
    --cdrom="$ISO_PATH" \
    --network network=default,model=virtio \
    --graphics vnc,listen=0.0.0.0 \
    --console pty,target_type=serial \
    --boot cdrom,hd \
    --os-variant=detect \
    --noautoconsole

echo ""
echo "‚úÖ VM l√©trehozva: $VM_NAME"
echo "üñ•Ô∏è  VNC kapcsolat: $(hostname -I | awk '{print $1}'):590X"
echo "üåê Cockpit: https://$(hostname -I | awk '{print $1}'):9090"
EOF

chmod +x /usr/local/bin/create-vm

# VM list√°z√≥ script
cat > /usr/local/bin/list-vms << 'EOF'
#!/bin/bash
# VM list√°z√≥ √©s inform√°ci√≥s script

echo "================================================"
echo "üñ•Ô∏è  VIRTU√ÅLIS G√âPEK √ÅTTEKINT√âSE"
echo "================================================"

echo ""
echo "üìä RENDSZER ER≈êFORR√ÅSOK:"
echo "‚îú‚îÄ‚îÄ CPU magok: $(nproc)"
echo "‚îú‚îÄ‚îÄ √ñsszes RAM: $(free -h | awk '/^Mem:/{print $2}')"
echo "‚îú‚îÄ‚îÄ Szabad RAM: $(free -h | awk '/^Mem:/{print $7}')"
echo "‚îî‚îÄ‚îÄ Disk szabad: $(df -h / | awk 'NR==2{print $4}')"

echo ""
echo "üñ±Ô∏è  FUT√ì VM-EK:"
VMS_RUNNING=$(virsh list --state-running --name | wc -l)
VMS_TOTAL=$(virsh list --all --name | grep -v "^$" | wc -l)
echo "‚îú‚îÄ‚îÄ Fut√≥: $VMS_RUNNING"
echo "‚îî‚îÄ‚îÄ √ñsszes: $VMS_TOTAL"

echo ""
virsh list --all

echo ""
echo "üåê H√ÅL√ìZATOK:"
virsh net-list --all

echo ""
echo "üíæ STORAGE POOLOK:"
virsh pool-list --all

if [ $VMS_TOTAL -gt 0 ]; then
    echo ""
    echo "üìã VM R√âSZLETEK:"
    for vm in $(virsh list --all --name | grep -v "^$"); do
        if [ ! -z "$vm" ]; then
            state=$(virsh domstate "$vm" 2>/dev/null)
            ram=$(virsh dominfo "$vm" 2>/dev/null | grep "Max memory" | awk '{print $3}')
            cpu=$(virsh dominfo "$vm" 2>/dev/null | grep "CPU(s)" | awk '{print $2}')
            ram_gb=$((ram / 1024 / 1024))
            echo "‚îú‚îÄ‚îÄ $vm: ${cpu} vCPU, ${ram_gb}GB RAM [$state]"
        fi
    done
fi

echo ""
echo "üîó HASZNOS PARANCSOK:"
echo "‚îú‚îÄ‚îÄ VM ind√≠t√°s: virsh start <vm-n√©v>"
echo "‚îú‚îÄ‚îÄ VM le√°ll√≠t√°s: virsh shutdown <vm-n√©v>"
echo "‚îú‚îÄ‚îÄ VM t√∂rl√©s: virsh destroy <vm-n√©v> && virsh undefine <vm-n√©v> --remove-all-storage"
echo "‚îú‚îÄ‚îÄ VNC port: virsh vncdisplay <vm-n√©v>"
echo "‚îî‚îÄ‚îÄ Cockpit WebUI: https://$(hostname -I | awk '{print $1}'):9090"
EOF

chmod +x /usr/local/bin/list-vms

# ISO let√∂lt≈ë script
cat > /usr/local/bin/download-iso << 'EOF'
#!/bin/bash
# N√©pszer≈± ISO-k let√∂lt≈ë script

ISO_DIR="/var/lib/libvirt/images/iso"
mkdir -p "$ISO_DIR"

echo "üì• ISO LET√ñLT≈ê ESZK√ñZ"
echo "====================="
echo ""
echo "V√°laszthat√≥ ISO-k:"
echo "1. Ubuntu Server 22.04 LTS"
echo "2. Ubuntu Desktop 22.04 LTS"  
echo "3. CentOS Stream 9"
echo "4. Rocky Linux 9"
echo "5. Debian 12"
echo "6. Alpine Linux"
echo "7. Egyedi URL"
echo ""

read -p "V√°lassz (1-7): " choice

case $choice in
    1)
        URL="https://releases.ubuntu.com/22.04/ubuntu-22.04.3-live-server-amd64.iso"
        FILENAME="ubuntu-22.04-server.iso"
        ;;
    2)
        URL="https://releases.ubuntu.com/22.04/ubuntu-22.04.3-desktop-amd64.iso"
        FILENAME="ubuntu-22.04-desktop.iso"
        ;;
    3)
        URL="https://mirror.stream.centos.org/9-stream/BaseOS/x86_64/iso/CentOS-Stream-9-latest-x86_64-dvd1.iso"
        FILENAME="centos-stream-9.iso"
        ;;
    4)
        URL="https://download.rockylinux.org/pub/rocky/9/isos/x86_64/Rocky-9.3-x86_64-minimal.iso"
        FILENAME="rocky-linux-9.iso"
        ;;
    5)
        URL="https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-12.2.0-amd64-netinst.iso"
        FILENAME="debian-12.iso"
        ;;
    6)
        URL="https://dl-cdn.alpinelinux.org/alpine/v3.18/releases/x86_64/alpine-standard-3.18.4-x86_64.iso"
        FILENAME="alpine-linux.iso"
        ;;
    7)
        read -p "Add meg az ISO URL-t: " URL
        read -p "Add meg a f√°jlnevet: " FILENAME
        ;;
    *)
        echo "√ârv√©nytelen v√°laszt√°s!"
        exit 1
        ;;
esac

echo ""
echo "üì• Let√∂lt√©s: $FILENAME"
echo "üåç URL: $URL"
echo "üìÅ C√©l: $ISO_DIR/$FILENAME"
echo ""

cd "$ISO_DIR"
wget -O "$FILENAME" "$URL"

if [ $? -eq 0 ]; then
    echo "‚úÖ Let√∂lt√©s k√©sz: $ISO_DIR/$FILENAME"
    echo "üöÄ VM l√©trehoz√°s: create-vm myvm 4 2 20 $ISO_DIR/$FILENAME"
else
    echo "‚ùå Let√∂lt√©s sikertelen!"
fi
EOF

chmod +x /usr/local/bin/download-iso

# ================================================
# 11. TELEP√çT√âS BEFEJEZ√âSE √âS INFORM√ÅCI√ìK
# ================================================
log_header "üéâ 11. TELEP√çT√âS BEFEJEZ√âSE"

log_step "Nested virtualiz√°ci√≥ ellen≈ërz√©se..."
# KVM modulok √∫jrat√∂lt√©se
if [ "$CPU_TYPE" = "intel" ]; then
    modprobe -r kvm_intel 2>/dev/null || true
    modprobe kvm_intel
elif [ "$CPU_TYPE" = "amd" ]; then
    modprobe -r kvm_amd 2>/dev/null || true
    modprobe kvm_amd
fi
modprobe kvm

# Nested support ellen≈ërz√©se
if [ -f /sys/module/kvm_intel/parameters/nested ]; then
    NESTED_STATUS=$(cat /sys/module/kvm_intel/parameters/nested)
    log_info "üîß Intel KVM nested: $NESTED_STATUS"
elif [ -f /sys/module/kvm_amd/parameters/nested ]; then
    NESTED_STATUS=$(cat /sys/module/kvm_amd/parameters/nested)
    log_info "üîß AMD KVM nested: $NESTED_STATUS"
fi

# Path friss√≠t√©se
export PATH="/usr/local/bin:$PATH"
echo 'export PATH="/usr/local/bin:$PATH"' >> /home/$CURRENT_USER/.bashrc

log_success "‚úÖ KVM virtualiz√°ci√≥s platform sikeresen telep√≠tve!"

# ================================================
# √ñSSZEFOGLAL√ì √âS √öTMUTAT√ìK
# ================================================
clear
log_header "================================================"
log_header "üéâ KVM VIRTUALIZ√ÅCI√ìS PLATFORM TELEP√çTVE!"
log_header "================================================"
echo ""

log_header "üìä RENDSZER √ñSSZEFOGLAL√ì:"
echo "üñ•Ô∏è  Szerver: $HOSTNAME ($SERVER_IP)"
echo "üíæ El√©rhet≈ë RAM VM-ekhez: ~$((TOTAL_RAM - 2048))MB"
echo "‚ö° CPU magok VM-ekhez: $((TOTAL_CPU - 1))"
echo "üîß Nested virtualiz√°ci√≥: Enged√©lyezve"
echo ""

log_header "üåê WEBES FEL√úLETEK:"
echo "üéõÔ∏è  Cockpit Management: https://$SERVER_IP:9090"
echo "   ‚îî‚îÄ‚îÄ Felhaszn√°l√≥: $CURRENT_USER"
echo "   ‚îî‚îÄ‚îÄ Jelsz√≥: (rendszer jelsz√≥)"
echo ""

log_header "üîß PARANCSSOR ESZK√ñZ√ñK:"
echo "üöÄ VM l√©trehoz√°s: create-vm <n√©v> <ram_gb> <cpu> <disk_gb> <iso_path>"
echo "üìã VM-ek list√°ja: list-vms"
echo "üì• ISO let√∂lt√©s: download-iso"
echo "üñ±Ô∏è  VM kezel√©s: virsh list --all"
echo ""

log_header "üì• P√âLDA VM L√âTREHOZ√ÅS:"
echo "1Ô∏è‚É£  ISO let√∂lt√©se:"
echo "   download-iso"
echo ""
echo "2Ô∏è‚É£  VM l√©trehoz√°sa:"
echo "   create-vm ubuntu-server 4 2 20 /var/lib/libvirt/images/iso/ubuntu-22.04-server.iso"
echo ""
echo "3Ô∏è‚É£  VNC kapcsolat:"
echo "   SSH tunnel: ssh -L 5900:localhost:5900 $CURRENT_USER@$SERVER_IP"
echo "   VNC c√≠m: localhost:5900"
echo ""

log_header "üîÑ √öJRAIND√çT√ÅS SZ√úKS√âGES:"
log_warn "‚ö†Ô∏è  A kernel param√©terek aktiv√°l√°s√°hoz √∫jraind√≠t√°s javasolt!"
echo ""
read -p "$(echo -e ${CYAN}"√öjraind√≠tod most a rendszert? (y/N): "${NC})" reboot_now

if [[ $reboot_now =~ ^[Yy]$ ]]; then
    log_info "üîÑ Rendszer √∫jraind√≠t√°sa 10 m√°sodperc m√∫lva..."
    log_info "üì± Kapcsol√≥dj √∫jra SSH-val a restart ut√°n!"
    sleep 10
    reboot
else
    log_warn "‚ö†Ô∏è  Ne felejts el √∫jraind√≠tani k√©s≈ëbb: sudo reboot"
fi

log_header "================================================"
log_success "üéâ TELEP√çT√âS BEFEJEZVE! SZUPER VIRTUALIZ√ÅL√ÅS! üöÄ"
log_header "================================================"